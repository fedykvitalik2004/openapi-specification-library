openapi: 3.0.3
info:
  title: Library API
  version: '1.0'
servers:
  - url: http://localhost:8080/api/v1
    description: Local Server
paths:
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - User
      requestBody:
        description: Data for the user to be created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        '200':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadUserDto"
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        '409':
          description: Conflict occurred, because user with such an email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExceptionMessage"
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - User
      x-spring-paginated: true
      responses:
        '200':
          description: All users retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadUserDtos"
  /users/{id}:
    parameters:
      - name: id
        required: true
        in: path
        description: Identifier of the user
        schema:
          type: integer
          format: int64
    get:
      summary: Find a user by ID
      tags:
        - User
      operationId: getUserById
      responses:
        '200':
          description: User successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUserDto'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
    put:
      summary: Update a user
      tags:
        - User
      operationId: updateUser
      requestBody:
        description: Data to update the user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUserDto'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
    delete:
      summary: Delete a user by ID
      tags:
        - User
      operationId: deleteUser
      responses:
        '204':
          description: User successfully deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        '409':
          description: User cannot be deleted because it is referenced elsewhere
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
  /users/{userId}/borrowed-books:
    get:
      summary: Find borrowed books by user's id
      tags:
        - User
      operationId: findBorrowedBooks
      x-spring-paginated: true
      parameters:
        - name: userId
          required: true
          in: path
          description: Identifier of the user
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Got borrowed books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadBorrowedBookDtos'
  /authors:
    post:
      summary: Create a new author
      tags:
        - Author
      operationId: createAuthor
      requestBody:
        description: Data for the author to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthorDto'
      responses:
        '201':
          description: Author successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAuthorDto'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
    get:
      summary: Get all authors
      tags:
        - Author
      operationId: getAllAuthors
      x-spring-paginated: true
      responses:
        '200':
          description: All authors retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAuthorDtos'
  /authors/{id}:
    parameters:
      - name: id
        required: true
        in: path
        description: Identifier of the author
        schema:
          type: integer
          format: int64
    get:
      summary: Find an author by ID
      tags:
        - Author
      operationId: getAuthorById
      responses:
        '200':
          description: Author successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAuthorDto'
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
    put:
      summary: Update an author
      tags:
        - Author
      operationId: updateAuthor
      requestBody:
        description: Data to update the author
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAuthorDto"
      responses:
        '200':
          description: Author successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAuthorDto'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
    delete:
      summary: Delete an author by ID
      tags:
        - Author
      operationId: deleteAuthor
      responses:
        '204':
          description: Author successfully deleted
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        '409':
          description: Author cannot be deleted because it is referenced elsewhere
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
  /books:
    post:
      summary: Create a new book
      operationId: createBook
      tags:
        - Book
      requestBody:
        description: Data to create a new book
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookDto'
      responses:
        '201':
          description: Book successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBookDto'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
    get:
      summary: Get all books
      operationId: getAllBooks
      tags:
        - Book
      responses:
        '200':
          description: All books retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadBookDtos"
  /books/search:
    parameters:
      - name: query
        required: true
        in: query
        schema:
          type: string
        example: 'pagesCount>:3,pagesCount<:5,title:Book'
    get:
      summary: Find books by criteria
      operationId: search
      tags:
        - Book
      x-spring-paginated: true
      description: |
        This endpoint allows users to search for books based on various search criteria for such fields ('title' and 'pagesCount'). Such operators are permitted: `:`, `!=`, `<`, `>`, `<:`, `>:`, `contains`. If there are several criteria, use ',' between them
      responses:
        '200':
          description: Books are retrieved accordingly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAuthorDto'
  /books/{id}:
    parameters:
      - name: id
        required: true
        in: path
        description: Identifier of the book
        schema:
          type: integer
          format: int64
        example: '1'
    get:
      summary: Find a book by ID
      operationId: getBookById
      tags:
        - Book
      responses:
        '200':
          description: Book successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAuthorDto'
        '404':
          description: Author not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
    put:
      summary: Update a book by ID
      tags:
        - Book
      operationId: updateBook
      requestBody:
        description: Data to update a book
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookDto'
      responses:
        '200':
          description: Book successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadBookDto'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
    delete:
      summary: Delete a book by ID
      operationId: deleteBook
      tags:
        - Book
      responses:
        '204':
          description: Book successfully deleted
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
        '409':
          description: Book cannot be deleted because it is referenced elsewhere
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
  /borrowed-books:
    post:
      summary: "Add a borrowed book"
      operationId: addBorrowedBook
      tags: 
        - BorrowedBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBorrowedBookDto'
      responses:
        '201':
          description: "Borrowed book successfully created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadBorrowedBookDto'
        '404':
          description: "Book or user doesn't exist"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ExceptionMessage'
        '409':
          description: "Borrowed book exists by its combination of IDs"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ExceptionMessage'
  /borrowed-books/{bookId}/{userId}:
    delete:
      summary: "Delete a borrowed book"
      operationId: deleteBorrowedBook
      tags:
        - BorrowedBook
      parameters:
        - name: bookId
          in: path
          required: true
          description: "The ID of the book to delete."
          schema:
            type: integer
            example: 123
        - name: userId
          in: path
          required: true
          description: "The ID of the user who borrowed the book."
          schema:
            type: integer
            example: 456
      responses:
        '204':
          description: "Successfully deleted the borrowed book record."
        '404':
          description: "The specified borrowed book record was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionMessage'
components:
  schemas:
    BookGenre:
      type: string
      enum:
        - FICTION
        - NON_FICTION
        - SCIENCE_FICTION
        - FANTASY
        - MYSTERY
        - BIOGRAPHY
        - HISTORICAL
        - ROMANCE
        - THRILLER
        - HORROR
        - SELF_HELP
        - HEALTH
        - COOKBOOK
        - CHILDREN
      description: Genre of the book
      example: "FICTION"
    FullName:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          example: "Mykyta"
        lastName:
          type: string
          example: "Shevchenko"
    ReadUserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        fullName:
          $ref: '#/components/schemas/FullName'
        email:
          type: string
          example: 'mail@gmail.com'
        birthday:
          type: string
          example: "29.03.2001"
    ReadUserDtos:
      type: array
      items:
        $ref: "#/components/schemas/ReadUserDto"
    CreateUserDto:
      type: object
      required:
        - fullName
        - email
        - password
        - birthday
      properties:
        fullName: 
          $ref: "#/components/schemas/FullName"
        email:
          type: string
          example: "mykyta_shechenko@gmail.com"
          minLength: 8
          maxLength: 20
        password:
          type: string
          example: "password123!"
        birthday:
          type: string
          example: "29.03.2001"
    CreateAuthorDto:
      type: object
      required:
        - fullName
      properties:
        fullName:
          $ref: "#/components/schemas/FullName"
        description:
          type: string
          maxLength: 300
    ReadAuthorDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          minimum: 1
        fullName:
          $ref: "#/components/schemas/FullName"
        description:
          type: string
    ReadAuthorDtos:
      type: array
      items:
        $ref: "#/components/schemas/ReadAuthorDto"
    CreateBookDto:
      type: object
      required:
        - title
        - genre
        - pagesCount
        - authorId
      properties:
        title:
          type: string
          description: The title of the book.
          example: "The Great Gatsby"
        description:
          type: string
          maxLength: 500
          description: A brief description of the book.
          example: "Description"
        genre:
          $ref: '#/components/schemas/BookGenre'
        pagesCount:
          type: integer
          format: int16
          description: Number of pages in the book.
          example: 180
        authorId:
          type: integer
          format: int64
          description: ID of the author of the book.
          example: 1
    ReadBookDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the book.
          example: 1
        title:
          type: string
          description: The title of the book.
          example: "The Great Gatsby"
        description:
          type: string
          maxLength: 500
          description: A brief description of the book.
          example: "Description"
        genre:
          $ref: '#/components/schemas/BookGenre'
        pagesCount:
          type: integer
          format: int16
          description: Number of pages in the book.
          example: 180
        authorId:
          type: string
          description: ID of the author of the book. Can be a numeric or string identifier.
          example: "1"
        authorFullName:
          $ref: '#/components/schemas/FullName'
    ReadBookDtos:
      type: array
      items:
        $ref: '#/components/schemas/ReadBookDto'
    CreateBorrowedBookDto:
      type: object
      required:
        - bookId
        - userId
        - returnDate
      properties:
        bookId:
          type: integer
          format: int64
          description: "The ID of the book being borrowed"
          example: 1
          minimum: 1
        userId:
          type: integer
          format: int64
          description: "The ID of the user borrowing the book"
          example: 67
          minimum: 1
        returnDate:
          type: string
          description: "The date when the book should be returned. Must be in the future."
          example: "2025-12-31T23:59:59Z"
    ReadBorrowedBookDto:
      type: object
      properties:
        book: 
          $ref: '#/components/schemas/ReadBookDto'
        userId:
          type: integer
          description: "The ID of the user who borrowed the book."
          example: 2
        borrowDate:
          type: string
          format: date-time
          description: "The date when the book was borrowed."
          example: "2024-11-01T10:00:00Z"
        returnDate:
          type: string
          format: date-time
          description: "The expected return date of the borrowed book."
          example: "2024-12-01T10:00:00Z"
    ReadBorrowedBookDtos:
      type: array
      items:
        $ref: '#/components/schemas/ReadBorrowedBookDto'
    ExceptionMessage:
      type: object
      properties:
        message:
          type: string
          example: "An error occurred"
        additionalInfo:
          type: object
          additionalProperties:
            type: object
          description: "Additional information related to the exception"
